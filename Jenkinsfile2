pipeline {
    agent any
    
    tools {
        nodejs "nodejs"
    }

    environment {
      ECR_REPO = 'fotopie-fed-uat'
      IMAGE_TAG = 'latest'
      SONARQUBE_PROJECTKEY = 'fotopie-front-end'
      CLUSTER_NAME = 'fotopie-fed-uat-cluster'
      SERVICE_NAME = 'fotopie-fed-uat-service'
      TASK_DEFINITION = 'fotopie-fed-uat'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/Do-06-Hang']], userRemoteConfigs: [[url: 'https://github.com/Go-Husky-FotoPie/FotoPie-Front-end.git']]])
            }
        }

        
        stage('SonarQube Scan') {
            environment {
                sonarqube_token = credentials('sonarqube_token')
                sonarqube_url = credentials('sonarqube_url')
                }
            steps {
             script {
               def scannerHome = tool 'SonarScanner'
               withSonarQubeEnv('SonarQube Server') {
                sh "${scannerHome}/bin/sonar-scanner \
                      -Dsonar.projectKey=$SONARQUBE_PROJECTKEY \
                      -Dsonar.sources=. \
                      -Dsonar.host.url=$sonarqube_url \
                      -Dsonar.login=$sonarqube_token"
                  }
               }
            }
         }

        stage("Quality Gate") {
            steps {
              timeout(time: 2, unit: 'MINUTES') {
                waitForQualityGate abortPipeline: true
            }
          }
        }
      }
    }  